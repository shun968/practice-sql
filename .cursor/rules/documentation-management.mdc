---
description: ドキュメントの管理と更新に関するルール
globs: ["**/*.md", "**/*.txt"]
alwaysApply: true
---

# ドキュメント管理ルール

## 基本方針
- **情報の一元化を重視**
- **冗長な記述を避ける**
- **相互参照を適切に設定**
- **最新の状態を維持**

## ドキュメント構造

### 必須ドキュメント
```
docs/
├── migration.md              # マイグレーション管理システム
├── analyze-mysql.md          # MySQL実行計画分析
└── README.md                 # プロジェクト概要（ルート）
```

### 禁止パターン
- 重複する内容のドキュメント
- 古い情報を含むドキュメント
- 削除されたファイルへの参照

## ドキュメント分類

### README.md（プロジェクト概要）
プロジェクトの全体像とセットアップ手順

```markdown
# Practice SQL

MySQLを使用したSQL学習・練習環境です。

## 特徴
- 🐳 Docker Composeによる簡単セットアップ
- 📊 実行計画の確認機能
- 🔄 カスタムマイグレーション管理システム

## セットアップ
```bash
make up
make migrate
make seed
```

詳細については `docs/migration.md` を参照してください。
```

### 技術ドキュメント（docs/）
特定の技術や機能に関する詳細な説明

```markdown
# マイグレーション管理システム

## 概要
カスタム実装のマイグレーション管理システムについて説明します。

## 使用方法
```bash
make migrate
make migrate-file FILE=sql/migrations/001_create_users_table.sql
```
```

## 禁止パターン

### 1. 重複ドキュメント
```markdown
# ❌ 禁止：同じ内容の複数ファイル
docs/migration-control.md
docs/migration-enhancement.md
docs/migration.md
```

### 2. 古い情報
```markdown
# ❌ 禁止：削除されたファイルへの参照
詳細については `docs/migration-control.md` を参照してください。

# ❌ 禁止：古いディレクトリ構成
├── sql/procedures/              # ストアドプロシージャ・関数
```

### 3. 不明確な参照
```markdown
# ❌ 禁止：不明確な参照
詳細についてはドキュメントを参照してください。

# ❌ 禁止：存在しないファイルへの参照
詳細については `docs/unknown.md` を参照してください。
```

## 推奨パターン

### 1. 情報の一元化
```markdown
# ✅ 良い例：統合されたドキュメント
docs/migration.md          # マイグレーション全般
docs/analyze-mysql.md      # MySQL分析
README.md                  # プロジェクト概要
```

### 2. 適切な相互参照
```markdown
# ✅ 良い例：明確な参照
詳細については `docs/migration.md` を参照してください。

# ✅ 良い例：セクションへの参照
詳細については `docs/migration.md#使用方法` を参照してください。
```

### 3. 最新情報の維持
```markdown
# ✅ 良い例：現在の状態を反映
├── sql/migrations/              # データベースマイグレーション
├── sql/seeds/                   # テストデータ・初期データ
├── sql/queries/                 # 分析・レポート用クエリ
└── sql/maintenance/             # メンテナンス用スクリプト
```

## ドキュメント更新ルール

### 1. ファイル変更時の更新
- 新しいファイル追加時：README.mdのディレクトリ構成を更新
- ファイル削除時：関連するドキュメントから参照を削除
- ファイル名変更時：全ての参照を更新

### 2. 機能変更時の更新
- 新しい機能追加時：関連ドキュメントを更新
- 機能削除時：関連ドキュメントから記述を削除
- 設定変更時：ドキュメントを最新化

### 3. 定期的な見直し
```bash
# ドキュメントの整合性確認
grep -r "migration-control.md" docs/
grep -r "migration-enhancement.md" docs/

# 存在しないファイルへの参照確認
grep -r "docs/" README.md | cut -d'/' -f2 | cut -d'.' -f1 | while read file; do
    if [ ! -f "docs/${file}.md" ]; then
        echo "Missing: docs/${file}.md"
    fi
done
```

## ドキュメント作成ガイドライン

### 1. 構造化された記述
```markdown
# タイトル

## 概要
簡潔な説明

## 詳細
詳細な説明

## 使用方法
```bash
# コマンド例
```

## 参考
関連ドキュメントへの参照
```

### 2. 適切なマークダウン記法
```markdown
# ✅ 良い例：適切な見出しレベル
# 大見出し
## 中見出し
### 小見出し

# ✅ 良い例：コードブロック
```sql
SELECT * FROM users;
```

# ✅ 良い例：リスト
- 項目1
- 項目2
- 項目3
```

### 3. 明確な説明
```markdown
# ✅ 良い例：具体的な説明
このコマンドは全ての未実行マイグレーションを実行します。

# ❌ 禁止：曖昧な説明
このコマンドを実行してください。
```

## 実装例

### 現在のプロジェクトでの使用例
```markdown
# README.md
## 使用方法
詳細については `docs/migration.md` を参照してください。

# docs/migration.md
## 概要
このプロジェクトでは、カスタム実装のマイグレーション管理システムを使用しています。

## 使用方法
```bash
make migrate
make migrate-file FILE=sql/migrations/001_create_users_table.sql
```
```

## 理由

### 情報の一元化を重視する理由
1. **保守性**: 一箇所の更新で済む
2. **一貫性**: 情報の矛盾を避ける
3. **効率性**: 更新作業の効率化
4. **明確性**: 情報の所在が明確

### 冗長な記述を避ける理由
1. **可読性**: 必要な情報に集中できる
2. **保守性**: 重複更新の手間を避ける
3. **明確性**: 情報の重複による混乱を防ぐ
4. **効率性**: ドキュメント作成時間の短縮

### 相互参照を適切に設定する理由
1. **ナビゲーション**: 関連情報への移動が容易
2. **構造化**: 情報の階層が明確
3. **保守性**: 関連ドキュメントの特定が容易
4. **ユーザビリティ**: 必要な情報への到達が簡単

## フォーマットチェック

### ドキュメント整合性チェック
```bash
# 削除されたファイルへの参照確認
grep -r "migration-control.md" docs/
grep -r "migration-enhancement.md" docs/

# 存在しないファイルへの参照確認
grep -r "docs/" README.md | cut -d'/' -f2 | cut -d'.' -f1 | while read file; do
    if [ ! -f "docs/${file}.md" ]; then
        echo "Missing: docs/${file}.md"
    fi
done
```

### マークダウン構文チェック
```bash
# 見出しレベルの確認
grep -n "^#" docs/*.md

# リンク切れの確認
grep -r "\[.*\](" docs/
```

